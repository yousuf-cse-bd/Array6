package Array6;/** * Arm manipulation of square matrix, best solve for diagonal matrix */public class SquareMatrixArms {    public static int sumOfRowWised(int[][] matrix, int rowNumber){        int sum = 0;        final int len = matrix[rowNumber].length;        for(int column = 0; column < len; column++){            sum += matrix[rowNumber][column];        }        return sum;    }    public static int sumOfColumnWised(int[][] matrix, int columnNumber){        int sum = 0;        final int len = matrix.length;//        for(int row = 0; row < len; row++){//            sum += matrix[row][columnNumber];//        }        for (final int[] rowMatrix : matrix) {            sum += rowMatrix[columnNumber];        }        return sum;    }    public static void main(String[] args) {        final int[][] matrix = {            {1,  2,  3,  4},            {5,  6,  7, 8},            {9, 10, 11, 12},            {13, 14, 15, 16},        };        for(int rowNumber = 0; rowNumber < matrix.length; rowNumber++){            System.out.println("Sum of row "+(rowNumber+1)+"'s: "+sumOfRowWised(matrix, rowNumber));        }        System.out.println("------------------------------------------------------");        int rowNumber = 0;        for(int columnNumber = 0; columnNumber < matrix[rowNumber].length; columnNumber++){            System.out.println("Sum of column "+(columnNumber+1)+"'s: "+sumOfColumnWised(matrix, columnNumber));            if(rowNumber == matrix.length - 1){ /*rowNumber always < length*/                rowNumber--;            }            rowNumber++;        }        System.out.println("------------------------------------------------------");        System.out.println("Sum of primary diagonal: "+sumOfPrimaryDiagonal(matrix));        System.out.println("Sum of secondary diagonal: "+sumOfSecondaryDiagonal(matrix));        /*Two diagonals will be same if the matrix is square and its elements are sequence ordered*/        boolean result = isDiagonalsEqual(sumOfPrimaryDiagonal(matrix), sumOfSecondaryDiagonal(matrix));        System.out.println("There are same, (comment: "+result+").");    }    public static int sumOfPrimaryDiagonal(int[][] matrix){        int sum = 0;        final int len = matrix.length;        for(int rowColumn = 0; rowColumn < len; rowColumn++){            sum += matrix[rowColumn][rowColumn];        }        return sum;    }    public static int sumOfSecondaryDiagonal(int[][] matrix){        int sum = 0;        final int len = matrix.length;        for(int i = 0; i < len; i++){            sum += matrix[i][len - (i+1)];        }        return sum;    }    public static boolean isDiagonalsEqual(int sum1, int sum2){        return sum1 == sum2;    }}